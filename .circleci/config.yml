version: 2.1
commands:
  check_update:
    description: "Check whether there is update under designated directory"
    parameters:
      dir:
        type: string
    steps:
      - run: |
          DIFF_FILES=`git diff HEAD^ HEAD --name-only --relative=<< parameters.dir >> | wc -l`
          if [ $DIFF_FILES -eq 0 ]
          then
          echo "There is no update under << parameters.dir >>"
          exit 1
          fi
  install_java_auth_gcp:
    description: "Install Java and prepare GCP"
    steps:
      - run:
          name: Install Java and prepare GCP
          command: |
            # Create Google application credentials file and auth SDK
            echo 'export GOOGLE_APPLICATION_CREDENTIALS=~/google_application_credentials.json' >> $BASH_ENV
            source $BASH_ENV
            echo $GCLOUD_SERVICE_KEY > $GOOGLE_APPLICATION_CREDENTIALS
            # Install
            apk --update add openjdk8
            gcloud components install app-engine-java
            gcloud --quiet components update
            gcloud auth activate-service-account --key-file $GOOGLE_APPLICATION_CREDENTIALS
            gcloud --quiet config set project $PROJECT
jobs:
  build_engine:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - run:
          name: Checkout state-engine
          command: |
            mkdir ~/.ssh
            echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
            pushd ~/
            git clone git@github.com:Fluxengin/state-engine.git
            popd
      - restore_cache:
          keys:
            - v1-m2-{{ .Branch }}-{{ checksum "~/state-engine/stateengine/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dsl-register/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-event-publisher/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-parser/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-local-test-runner/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dsl-loader/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-persist-manager/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-remote-test-runner/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-web-service/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-housekeep/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-housekeep-servlet/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-batch-servlet/pom.xml" }}
            - v1-m2-{{ .Branch }}-
            - v1-m2-
      - run:
          name: Build state-engine
          command: |
            for projectDir in stateengine fluxengine-dsl-register fluxengine-event-publisher fluxengine-parser fluxengine-local-test-runner fluxengine-dsl-loader fluxengine-persist-manager fluxengine-remote-test-runner fluxengine-dataflow fluxengine-web-service fluxengine-dataflow-housekeep fluxengine-dataflow-housekeep-servlet fluxengine-dataflow-batch-servlet
            do
            pushd ~/state-engine/$projectDir
            mvn clean install -U
            popd
            done
      - save_cache:
          key: v1-m2-{{ .Branch }}-{{ checksum "~/state-engine/stateengine/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dsl-register/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-event-publisher/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-parser/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-local-test-runner/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dsl-loader/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-persist-manager/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-remote-test-runner/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-web-service/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-housekeep/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-housekeep-servlet/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-batch-servlet/pom.xml" }}
          paths:
            - ~/.m2
      - persist_to_workspace:
          root: ~/state-engine
          paths:
            - .
  check_test_fdsl:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/fdsl-test
    steps:
      - checkout
      - check_update:
          dir: "fluxengine-local-test"
  test_fdsl:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/fdsl-test
    steps:
      - checkout
      - attach_workspace:
          at: ~/state-engine
      - run:
          name: Replace test runner
          command: |
            rm -f fluxengine-local-test/lib/fluxengine-local-test-runner-*.jar
            cp -f ~/state-engine/fluxengine-local-test-runner/target/fluxengine-local-test-runner-*.jar fluxengine-local-test/lib/
            diff -q ~/state-engine/fluxengine-local-test-runner/target/fluxengine-local-test-runner-*.jar fluxengine-local-test/lib/fluxengine-local-test-runner-*.jar
      - restore_cache:
          keys:
            - v1-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}
            - v1-gradle-{{ .Branch }}-
            - v1-gradle-
      - run:
          name: Build test
          command: |
            pushd fluxengine-local-test
            chmod +x gradlew
            ./gradlew build -x test
            popd
      - save_cache:
          key: v1-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}
          paths:
            - ~/.gradle
      - run:
          name: Run test
          command: |
            pushd fluxengine-local-test
            export CONF=`pwd`/conf/
            ./gradlew test
            popd
      - store_artifacts:
          path: fluxengine-local-test/build/reports/tests/test
  check_deploy_dsl:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/fdsl-test
    steps:
      - checkout
      - check_update:
          dir: "fluxengine-integration-test"
  deploy_dsl:
    # Required environmental variables
    # GCLOUD_SERVICE_KEY: contents of JSON key file of service account
    # PROJECT: GCP project name to deploy
    # FLUXENGINE_LICENSE_ENCODED: base64-encoded Fluxengine license file
    docker:
      - image: google/cloud-sdk:alpine
    working_directory: ~/fdsl-test
    steps:
      - install_java_auth_gcp
      - checkout
      - attach_workspace:
          at: ~/state-engine
      - run:
          name: Replace test runner
          command: |
            pushd fluxengine-integration-test/lib
            rm -f fluxengine-*.jar
            cp -f ~/state-engine/fluxengine-local-test-runner/target/fluxengine-local-test-runner-*.jar ./
            diff -q ~/state-engine/fluxengine-local-test-runner/target/fluxengine-local-test-runner-*.jar fluxengine-local-test-runner-*.jar
            popd
      - restore_cache:
          keys:
            - v1-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}
            - v1-gradle-{{ .Branch }}-
            - v1-gradle-
      - run:
          name: Build integration test
          command: |
            pushd fluxengine-integration-test
            chmod +x gradlew
            ./gradlew build -x test # TODO remove "-x test" when fixed https://trello.com/c/yZcav5AD
            popd
      - save_cache:
          key: v1-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}
          paths:
            - ~/.gradle
      - run:
          name: Edit conf
          command: |
            pushd fluxengine-integration-test/conf
            sed -i -e "s/\[PROJECT\]/${PROJECT}/g" dslDataStore.properties
            echo $FLUXENGINE_LICENSE_ENCODED | base64 -d > license.lic
            popd
      - run:
          name: Move DSL
          command: |
            mv -f fluxengine-integration-test/src/main/dsl fluxengine-integration-test/
      - run:
          name: Copy jar
          command: |
            pushd fluxengine-integration-test/lib
            # Copy integration test jar
            cp -f ../build/libs/fluxengine-integration-test-*.jar ./
            diff -q ../build/libs/fluxengine-integration-test-*.jar fluxengine-integration-test-*.jar
            # Copy core jar
            cp -f ~/state-engine/stateengine/target/fluxengine-core-*.jar ./
            rm -f fluxengine-core-*-tests.jar
            # Copy other jars
            for libname in dsl-register parser persist-manager
            do
            cp -f ~/state-engine/fluxengine-${libname}/target/fluxengine-${libname}-*.jar ./
            diff -q ~/state-engine/fluxengine-${libname}/target/fluxengine-${libname}-*.jar fluxengine-${libname}-*.jar
            done
            popd
      - run:
          name: Register DSL
          command: |
            pushd fluxengine-integration-test
            cp -f ~/state-engine/fluxengine-dsl-register/tools/gcp/regisdsl.sh ./
            diff -q ~/state-engine/fluxengine-dsl-register/tools/gcp/regisdsl.sh regisdsl.sh
            chmod +x regisdsl.sh
            mkdir out
            mkdir log
            VERSION=`ls lib/fluxengine-core-*.jar | sed -e 's/^.*fluxengine-core-\([0-9]\+\).*\.jar/\1/'`
            EFFECTIVE_DATE=`date +"%Y%m%d"`
            # Run regisdsl with classpath of fluxengine-dsl-register because fluxengine-dsl-register requires GCP related jars but it's not a fat jar
            env CLASSPATH=~/state-engine/fluxengine-dsl-register/target/lib/* ./regisdsl.sh ${VERSION} ${EFFECTIVE_DATE}
            popd
  deploy_dataflow_job:
    # Required environmental variables
    # GCLOUD_SERVICE_KEY: contents of JSON key file of service account
    # PROJECT: GCP project name to deploy
    # BUCKET: Storage bucket name to use for deployment
    # TOPIC: Pub/Sub topic name to use for deployment
    docker:
      - image: google/cloud-sdk:alpine
    working_directory: ~/fdsl-test
    steps:
      - install_java_auth_gcp
      - run:
          name: Check existing Dataflow job
          command: |
            gcloud dataflow jobs list --status=active | while read id name type creationDate creationTime state region
            do
            if [ $(echo $name | grep -e 'fluxenginedataflowprocessor-root-') ]
            then
            echo "Detected $id $name $type $creationDate $creationTime $state $region"
            circleci step halt
            exit 0
            fi
            done
      - checkout
      - attach_workspace:
          at: ~/state-engine
      - run:
          name: Edit env file
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test/conf
            sed -i -e "s/\[YOUR_BUCKET_NAME\]/${BUCKET}/g" dataflow_job_publisher_sample.env
            sed -i -e "s/\[PROJECT\]/${PROJECT}/g" dataflow_job_publisher_sample.env
            sed -i -e "s/\[YOUR_TOPIC_NAME\]/${TOPIC}/g" dataflow_job_publisher_sample.env
            for confFile in dslDataStore.properties effectorDataStore.properties illegalEventDataStore.properties persisterDataStore.properties
            do
            sed -i -e "s/\[PROJECT\]/${PROJECT}/g" $confFile
            done
            popd
      - run:
          name: Replace jar
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test/lib
            rm -f fluxengine-*.jar
            cp -f ~/state-engine/fluxengine-dataflow/target/fluxengine-dataflow-*.jar ./
            diff -q ~/state-engine/fluxengine-dataflow/target/fluxengine-dataflow-*.jar fluxengine-dataflow-*.jar
            popd
      - restore_cache:
          keys:
            - v1-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}
            - v1-gradle-{{ .Branch }}-
            - v1-gradle-
      - run:
          name: Build integration test
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test
            chmod +x gradlew
            ./gradlew build -x test
            cp -f build/libs/fluxengine-integration-test-*.jar lib/
            diff -q build/libs/fluxengine-integration-test-*.jar lib/fluxengine-integration-test-*.jar
            popd
      - save_cache:
          key: v1-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}
          paths:
            - ~/.gradle
      - run:
          name: Stop previous jobs
          command: |
            gcloud dataflow jobs list --status=active | while read id name type creationTime state region
            do
            if [ $(echo $name | grep -e 'fluxenginedataflowprocessor-root-') ]
            then
            echo "Stopping $id $name $type $creationTime $state $region"
            gcloud dataflow jobs cancel $id
            fi
            done
      - run:
          name: Register job
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test
            chmod +x dataflow_job_publisher.sh
            ./dataflow_job_publisher.sh stream conf/dataflow_job_publisher_sample.env debug
            popd
      - persist_to_workspace:
          root: ~/
          paths:
            - state-engine
            - fdsl-test
  test_dataflow:
    # Required environmental variables
    # GCLOUD_SERVICE_KEY: contents of JSON key file of service account
    # PROJECT: GCP project name to deploy
    # BUCKET: Storage bucket name to use for deployment
    # TOPIC: Pub/Sub topic name to use for deployment
    docker:
      - image: google/cloud-sdk:alpine
    working_directory: ~/fdsl-test
    steps:
      - install_java_auth_gcp
      - checkout
      - attach_workspace:
          at: ~/state-engine
      - run:
          name: Edit env file
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test/conf
            sed -i -e "s/\[YOUR_BUCKET_NAME\]/${BUCKET}/g" dataflow_job_publisher_sample.env
            sed -i -e "s/\[PROJECT\]/${PROJECT}/g" dataflow_job_publisher_sample.env
            sed -i -e "s/\[YOUR_TOPIC_NAME\]/${TOPIC}/g" dataflow_job_publisher_sample.env
            for confFile in dslDataStore.properties effectorDataStore.properties illegalEventDataStore.properties persisterDataStore.properties
            do
            sed -i -e "s/\[PROJECT\]/${PROJECT}/g" $confFile
            done
            popd
      - run:
          name: Replace test runner
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test/lib
            rm -f fluxengine-*.jar
            for projectDir in fluxengine-local-test-runner fluxengine-remote-test-runner
            do
            cp -f ~/state-engine/${projectDir}/target/${projectDir}-*.jar ./
            diff -q ~/state-engine/${projectDir}/target/${projectDir}-*.jar ${projectDir}-*.jar
            done
            popd
      - restore_cache:
          keys:
            - v1-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}
            - v1-gradle-{{ .Branch }}-
            - v1-gradle-
      - run:
          name: Test Dataflow job
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test
            env FLUXENGINE_INTEGRATION_TEST_MODE=DATAFLOW ./gradlew test --tests jp.co.fluxengine.example.dataflowtest.DataflowTest
            popd
      - save_cache:
          key: v1-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}
          paths:
            - ~/.gradle
      - run:
          name: Copy log file
          command: cp -f ~/fdsl-test/fluxengine-integration-test/debug.log ~/fdsl-test/fluxengine-integration-test/build/reports/tests/test/
          when: always
      - store_artifacts:
          path: ~/fdsl-test/fluxengine-integration-test/build/reports/tests/test
workflows:
  version: 2
  test_fdsl:
    jobs:
      - check_test_fdsl:
          filters:
            branches:
              only:
                - feature/integration_test # TODO will replace it with "master"
      - build_engine:
          requires:
            - check_test_fdsl
          filters:
            branches:
              only:
                - feature/integration_test # TODO will replace it with "master"
      - test_fdsl:
          requires:
            - build_engine
          filters:
            branches:
              only:
                - feature/integration_test # TODO will replace it with "master"
  deploy_dsl_test:
    jobs:
      - check_deploy_dsl:
          filters:
            branches:
              only:
                - feature/integration_test # TODO will replace it with "master"
      - build_engine:
          requires:
            - check_deploy_dsl
          filters:
            branches:
              only:
                - feature/integration_test # TODO will replace it with "master"
      - deploy_dsl:
          requires:
            - build_engine
          filters:
            branches:
              only:
                - feature/integration_test # TODO will replace it with "master"
      - deploy_dataflow_job:
          requires:
            - deploy_dsl
          filters:
            branches:
              only:
                - feature/integration_test # TODO will replace it with "master"
      - test_dataflow:
          requires:
            - deploy_dataflow_job
          filters:
            branches:
              only:
                - feature/integration_test # TODO will replace it with "master"