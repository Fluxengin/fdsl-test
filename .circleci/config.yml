version: 2.1
commands:
  check_update:
    description: "Check whether there is update under designated directory"
    parameters:
      dir:
        type: string
    steps:
      - checkout
      - run:
          name: Skip job if no update under the directory
          command: |
            if [ $CIRCLE_BRANCH = "master" ]
            then
            DIFF_TARGET="HEAD^ HEAD"
            else
            DIFF_TARGET="origin/master"
            fi
            DIFF_FILES=`git diff ${DIFF_TARGET} --name-only --relative=<< parameters.dir >> | wc -l`
            if [ $DIFF_FILES -eq 0 ]
            then
            echo "There is no update under << parameters.dir >>"
            circleci step halt
            fi
  install_java_auth_gcp:
    description: "Install Java and prepare GCP"
    steps:
      - run:
          name: Install Java and prepare GCP
          command: |
            # Create Google application credentials file and auth SDK
            echo 'export GOOGLE_APPLICATION_CREDENTIALS=~/google_application_credentials.json' >> $BASH_ENV
            source $BASH_ENV
            echo $GCLOUD_SERVICE_KEY > $GOOGLE_APPLICATION_CREDENTIALS
            # Install
            apk --update add openjdk8
            apk --update add libc6-compat # required to run dataflow_job_publisher.sh
            ln -s /lib/libc.musl-x86_64.so.1 /lib/ld-linux-x86-64.so.2 # not enough to install libc6-compat
            gcloud components install app-engine-java
            gcloud --quiet components update
            gcloud auth activate-service-account --key-file $GOOGLE_APPLICATION_CREDENTIALS
            gcloud --quiet config set project $PROJECT
  edit_integration_test_conf_files:
    description: "Replace placeholders in conf and env files of integration test with environment variables"
    steps:
      - run:
          name: Edit conf files
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test/conf
            sed -i -e "s/\[YOUR_BUCKET_NAME\]/${BUCKET}/g" dataflow_job_publisher_sample.env
            sed -i -e "s/\[PROJECT\]/${PROJECT}/g" dataflow_job_publisher_sample.env
            sed -i -e "s/\[YOUR_SUBSCRIPTION_NAME\]/${SUBSCRIPTION}/g" dataflow_job_publisher_sample.env
            for confFile in dslDataStore effectorDataStore illegalEventDataStore persisterDataStore publisher
            do
            sed -i -e "s/\[PROJECT\]/${PROJECT}/g" ${confFile}.properties
            done
            sed -i -e "s/\[YOUR_TOPIC_NAME\]/${TOPIC}/g" publisher.properties
            sed -i -e "s/\[CLOUD_SQL_INSTANCE_NAME\]/${CLOUD_SQL_INSTANCE_NAME}/g" application-jdbc.properties
            sed -i -e "s/\[DB_USER\]/${DB_USER}/g" application-jdbc.properties
            sed -i -e "s/\[DB_PASS\]/${DB_PASS}/g" application-jdbc.properties
            popd
  build_engine_if_modified:
    description: "Build engine if a designated fdsl-test directory modified"
    parameters:
      dir:
        type: string
    steps:
      - check_update:
          dir: << parameters.dir >>
      - run:
          name: Checkout state-engine
          command: |
            mkdir -p ~/.ssh
            echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
            pushd ~/
            git clone git@github.com:Fluxengin/state-engine.git
            pushd state-engine
            git checkout 820e60dd92c26d1b8d99e23e3152bcf64556a1e6 # TODO remove this line when merging into master
            popd
            popd
      - restore_cache:
          keys:
            - v1-m2-{{ .Branch }}-{{ checksum "~/state-engine/stateengine/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dsl-register/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-event-publisher/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-parser/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-local-test-runner/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dsl-loader/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-persist-manager/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-remote-test-runner/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-web-service/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-housekeep/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-housekeep-servlet/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-batch-servlet/pom.xml" }}
            - v1-m2-{{ .Branch }}-
            - v1-m2-
      - run:
          name: Build state-engine
          command: |
            for projectDir in stateengine fluxengine-dsl-register fluxengine-event-publisher fluxengine-parser fluxengine-local-test-runner fluxengine-dsl-loader fluxengine-persist-manager fluxengine-remote-test-runner fluxengine-dataflow fluxengine-web-service fluxengine-dataflow-housekeep fluxengine-dataflow-housekeep-servlet fluxengine-dataflow-batch-servlet
            do
            pushd ~/state-engine/$projectDir
            mvn clean install -U
            popd
            done
      - save_cache:
          key: v1-m2-{{ .Branch }}-{{ checksum "~/state-engine/stateengine/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dsl-register/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-event-publisher/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-parser/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-local-test-runner/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dsl-loader/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-persist-manager/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-remote-test-runner/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-web-service/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-housekeep/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-housekeep-servlet/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-batch-servlet/pom.xml" }}
          paths:
            - ~/.m2
      - persist_to_workspace:
          root: ~/state-engine
          paths:
            - .
jobs:
  build_engine_if_local_modified:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - build_engine_if_modified:
          dir: "fluxengine-local-test"
  test_fdsl:
    docker:
      - image: circleci/openjdk:8-jdk
        user: root
    working_directory: ~/fdsl-test
    steps:
      - check_update:
          dir: "fluxengine-local-test"
      - attach_workspace:
          at: ~/state-engine
      - run:
          name: Replace test runner
          command: |
            rm -f ~/fdsl-test/fluxengine-local-test/lib/fluxengine-local-test-runner-*.jar
            cp -f ~/state-engine/fluxengine-local-test-runner/target/fluxengine-local-test-runner-*.jar ~/fdsl-test/fluxengine-local-test/lib/
            diff -q ~/state-engine/fluxengine-local-test-runner/target/fluxengine-local-test-runner-*.jar fluxengine-local-test/lib/fluxengine-local-test-runner-*.jar
      - restore_cache:
          keys:
            - v1-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}
            - v1-gradle-{{ .Branch }}-
            - v1-gradle-
      - run:
          name: Run test
          command: |
            pushd ~/fdsl-test/fluxengine-local-test
            chmod +x gradlew
            export CONF=`pwd`/conf/
            ./gradlew test
            popd
      - run:
          name: Copy log file
          command: cp -f ~/fdsl-test/fluxengine-local-test/debug.log ~/fdsl-test/fluxengine-local-test/build/reports/tests/test/
          when: always
      - save_cache:
          key: v1-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}
          paths:
            - ~/.gradle
      - store_artifacts:
          path: ~/fdsl-test/fluxengine-local-test/build/reports/tests/test
  build_engine_if_integration_modified:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - build_engine_if_modified:
          dir: "fluxengine-integration-test"
  deploy_dsl:
    # Required environmental variables
    # GCLOUD_SERVICE_KEY: contents of JSON key file of service account
    # PROJECT: GCP project name to deploy
    # FLUXENGINE_LICENSE_ENCODED: base64-encoded Fluxengine license file
    docker:
      - image: google/cloud-sdk:alpine
    working_directory: ~/fdsl-test
    steps:
      - check_update:
          dir: "fluxengine-integration-test"
      - install_java_auth_gcp
      - attach_workspace:
          at: ~/state-engine
      - run:
          name: Replace jar
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test/lib
            rm -f fluxengine-*.jar
            for projectDir in local-test-runner remote-test-runner event-publisher
            do
            cp -f ~/state-engine/fluxengine-${projectDir}/target/fluxengine-${projectDir}-*.jar ./
            diff -q ~/state-engine/fluxengine-${projectDir}/target/fluxengine-${projectDir}-*.jar fluxengine-${projectDir}-*.jar
            done
            popd
      - restore_cache:
          keys:
            - v1-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}
            - v1-gradle-{{ .Branch }}-
            - v1-gradle-
      - run:
          name: Build integration test
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test
            chmod +x gradlew
            ./gradlew build copyDependencies
            popd
      - save_cache:
          key: v1-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}
          paths:
            - ~/.gradle
      - run:
          name: Edit conf
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test/conf
            sed -i -e "s/\[PROJECT\]/${PROJECT}/g" dslDataStore.properties
            echo $FLUXENGINE_LICENSE_ENCODED | base64 -d > license.lic
            popd
      - run:
          name: Move DSL
          command: |
            mv -f ~/fdsl-test/fluxengine-integration-test/src/main/dsl ~/fdsl-test/fluxengine-integration-test/
      - run:
          name: Copy jar
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test/lib
            # Copy integration test jar
            cp -f ../build/libs/fluxengine-integration-test-*.jar ./
            diff -q ../build/libs/fluxengine-integration-test-*.jar fluxengine-integration-test-*.jar
            # Copy core jar
            cp -f ~/state-engine/stateengine/target/fluxengine-core-*.jar ./
            rm -f fluxengine-core-*-tests.jar
            # Copy other jars
            for libname in dsl-register parser persist-manager
            do
            cp -f ~/state-engine/fluxengine-${libname}/target/fluxengine-${libname}-*.jar ./
            diff -q ~/state-engine/fluxengine-${libname}/target/fluxengine-${libname}-*.jar fluxengine-${libname}-*.jar
            done
            popd
      - run:
          name: Register DSL
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test
            cp -f ~/state-engine/fluxengine-dsl-register/tools/gcp/regisdsl.sh ./
            diff -q ~/state-engine/fluxengine-dsl-register/tools/gcp/regisdsl.sh regisdsl.sh
            chmod +x regisdsl.sh
            mkdir -p out
            mkdir -p log
            VERSION=`ls lib/fluxengine-core-*.jar | sed -e 's/^.*fluxengine-core-\([0-9]\+\).*\.jar/\1/'`
            EFFECTIVE_DATE=`date +"%Y%m%d"`
            # Run regisdsl with classpath of fluxengine-dsl-register because fluxengine-dsl-register requires GCP related jars but it's not a fat jar
            env CLASSPATH=~/state-engine/fluxengine-dsl-register/target/lib/* ./regisdsl.sh ${VERSION} ${EFFECTIVE_DATE}
            popd
  deploy_dataflow_job:
    # Required environmental variables
    # GCLOUD_SERVICE_KEY: contents of JSON key file of service account
    # PROJECT: GCP project name to deploy
    # BUCKET: Storage bucket name to use for deployment
    # TOPIC: Pub/Sub topic name to use for deployment
    # SUBSCRIPTION: Pub/Sub subscription name for dataflow to use for deployment
    docker:
      - image: google/cloud-sdk:alpine
    working_directory: ~/fdsl-test
    steps:
      - check_update:
          dir: "fluxengine-integration-test"
      - install_java_auth_gcp
      - attach_workspace:
          at: ~/state-engine
      - edit_integration_test_conf_files
      - run:
          name: Replace jar
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test/lib
            rm -f fluxengine-*.jar
            for libname in local-test-runner dataflow
            do
            cp -f ~/state-engine/fluxengine-${libname}/target/fluxengine-${libname}-*.jar ./
            diff -q ~/state-engine/fluxengine-${libname}/target/fluxengine-${libname}-*.jar fluxengine-${libname}-*.jar
            done
            popd
      - restore_cache:
          keys:
            - v1-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}
            - v1-gradle-{{ .Branch }}-
            - v1-gradle-
      - run:
          name: Build integration test
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test
            chmod +x gradlew
            ./gradlew build copyDependencies
            cp -f build/libs/fluxengine-integration-test-*.jar lib/
            diff -q build/libs/fluxengine-integration-test-*.jar lib/fluxengine-integration-test-*.jar
            popd
      - save_cache:
          key: v1-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}
          paths:
            - ~/.gradle
      - run:
          name: Register job
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test
            chmod +x dataflow_job_publisher.sh
            ./dataflow_job_publisher.sh stream conf/dataflow_job_publisher_sample.env debug | tee temp_dataflow_job_register_output.txt
            # Obtain deployed job ID in order to stop it later
            grep 'Submitted job:' temp_dataflow_job_register_output.txt | awk '{print $3}' > ~/state-engine/dataflow_job_id.txt
            popd
      - persist_to_workspace:
          root: ~/state-engine
          paths:
            - .
      - run:
          name: Install maven
          command: |
            mkdir ~/maven
            pushd ~/maven
            wget https://www-us.apache.org/dist/maven/maven-3/3.6.1/binaries/apache-maven-3.6.1-bin.tar.gz
            tar xzvf apache-maven-3.6.1-bin.tar.gz
            echo 'export PATH=$PATH:~/maven/apache-maven-3.6.1/bin' >> $BASH_ENV
            popd
      - run:
          name: Delete source files to deploy web service
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test/src
            rm -rf test
            rm -rf main/dsl
            rm -rf main/java
            popd
      - run:
          name: Copy jar
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test
            mkdir -p src/main/webapp/WEB-INF/lib
            cp -f build/libs/fluxengine-integration-test-*.jar ~/state-engine/fluxengine-web-service/target/fluxengine-web-service-*.jar src/main/webapp/WEB-INF/lib/
            diff -q build/libs/fluxengine-integration-test-*.jar src/main/webapp/WEB-INF/lib/fluxengine-integration-test-*.jar
            diff -q ~/state-engine/fluxengine-web-service/target/fluxengine-web-service-*.jar src/main/webapp/WEB-INF/lib/fluxengine-web-service-*.jar
            popd
      - run:
          name: Copy conf files
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test
            mkdir -p src/main/resources
            for confFile in dslDataStore dslLoader effectorDataStore persisterDataStore variant_cache
            do
            cp -f conf/${confFile}.properties src/main/resources/
            diff -q conf/${confFile}.properties src/main/resources/${confFile}.properties
            done
            popd
      - run:
          name: Deploy web service
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test
            mvn clean package appengine:deploy
            popd
  test_dataflow:
    # Required environmental variables
    # GCLOUD_SERVICE_KEY: contents of JSON key file of service account
    # PROJECT: GCP project name to deploy
    # BUCKET: Storage bucket name to use for deployment
    # TOPIC: Pub/Sub topic name to use for deployment
    # SUBSCRIPTION: Pub/Sub subscription name for dataflow to use for deployment
    docker:
      - image: google/cloud-sdk:alpine
    working_directory: ~/fdsl-test
    steps:
      - check_update:
          dir: "fluxengine-integration-test"
      - install_java_auth_gcp
      - attach_workspace:
          at: ~/state-engine
      - edit_integration_test_conf_files
      - run:
          name: Replace jar
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test/lib
            rm -f fluxengine-*.jar
            for projectDir in local-test-runner remote-test-runner event-publisher
            do
            cp -f ~/state-engine/fluxengine-${projectDir}/target/fluxengine-${projectDir}-*.jar ./
            diff -q ~/state-engine/fluxengine-${projectDir}/target/fluxengine-${projectDir}-*.jar fluxengine-${projectDir}-*.jar
            done
            popd
      - restore_cache:
          keys:
            - v1-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}
            - v1-gradle-{{ .Branch }}-
            - v1-gradle-
      - run:
          name: Test Dataflow job
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test
            chmod +x gradlew
            env FLUXENGINE_INTEGRATION_TEST_MODE=DATAFLOW ./gradlew test --tests jp.co.fluxengine.example.dataflowtest.DataflowTest
            popd
      - save_cache:
          key: v1-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}
          paths:
            - ~/.gradle
      - run:
          name: Copy log file
          command: cp -f ~/fdsl-test/fluxengine-integration-test/debug.log ~/fdsl-test/fluxengine-integration-test/build/reports/tests/test/
          when: always
      - store_artifacts:
          path: ~/fdsl-test/fluxengine-integration-test/build/reports/tests/test
      - run:
          name: Stop Dataflow job
          command: |
            while read dataflowJobId
            do
            echo "Stopping $dataflowJobId"
            gcloud dataflow jobs drain $dataflowJobId --region=asia-northeast1
            done < ~/state-engine/dataflow_job_id.txt
          when: always
  test_dataflow_batch:
    # Required environmental variables
    # GCLOUD_SERVICE_KEY: contents of JSON key file of service account
    # PROJECT: GCP project name to deploy
    # BUCKET: Storage bucket name to use for deployment
    # TOPIC: Pub/Sub topic name to use for deployment
    # SUBSCRIPTION: Pub/Sub subscription name for dataflow to use for deployment
    docker:
      - image: google/cloud-sdk:alpine
    working_directory: ~/fdsl-test
    steps:
      - check_update:
          dir: "fluxengine-integration-test"
      - install_java_auth_gcp
      - attach_workspace:
          at: ~/state-engine
      - edit_integration_test_conf_files
      - run:
          name: Replace jar
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test/lib
            rm -f fluxengine-*.jar
            for projectDir in local-test-runner remote-test-runner event-publisher
            do
            cp -f ~/state-engine/fluxengine-${projectDir}/target/fluxengine-${projectDir}-*.jar ./
            diff -q ~/state-engine/fluxengine-${projectDir}/target/fluxengine-${projectDir}-*.jar fluxengine-${projectDir}-*.jar
            done
            popd
      - restore_cache:
          keys:
            - v1-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}
            - v1-gradle-{{ .Branch }}-
            - v1-gradle-
      - run:
          name: Test Dataflow batch job
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test
            chmod +x gradlew
            env FLUXENGINE_INTEGRATION_TEST_MODE=DATAFLOWBATCH ./gradlew test --tests jp.co.fluxengine.example.dataflowtest.DataflowBatchTest
            popd
      - save_cache:
          key: v1-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}
          paths:
            - ~/.gradle
      - run:
          name: Copy log file
          command: cp -f ~/fdsl-test/fluxengine-integration-test/debug.log ~/fdsl-test/fluxengine-integration-test/build/reports/tests/test/
          when: always
      - store_artifacts:
          path: ~/fdsl-test/fluxengine-integration-test/build/reports/tests/test
workflows:
  version: 2
  test_fdsl:
    jobs:
      - build_engine_if_local_modified:
          filters:
            branches:
              only:
                - master
                - /.*circleci.*/
      - test_fdsl:
          requires:
            - build_engine_if_local_modified
          filters:
            branches:
              only:
                - master
                - /.*circleci.*/
  deploy_dsl_test:
    jobs:
      - build_engine_if_integration_modified:
          filters:
            branches:
              only:
                - master
                - /.*circleci.*/
      - deploy_dsl:
          requires:
            - build_engine_if_integration_modified
          filters:
            branches:
              only:
                - master
                - /.*circleci.*/
      - deploy_dataflow_job:
          requires:
            - deploy_dsl
          filters:
            branches:
              only:
                - master
                - /.*circleci.*/
      - test_dataflow:
          requires:
            - deploy_dataflow_job
          filters:
            branches:
              only:
                - master
                - /.*circleci.*/
      - test_dataflow_batch:
          requires:
            - deploy_dataflow_job
          filters:
            branches:
              only:
                - master
                - /.*circleci.*/
