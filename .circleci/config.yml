# Required environmental variables
# GCLOUD_SERVICE_KEY: contents of JSON key file of service account
# PROJECT: GCP project name to deploy
# BUCKET: Storage bucket name to use for deployment
# FLUXENGINE_LICENSE_ENCODED: base64-encoded Fluxengine license file
# CLOUD_SQL_INSTANCE_NAME: Cloud SQL instance name to store effector result and memorystore data
# DB_USER: Username for Cloud SQL
# DB_PASS: Password for Cloud SQL
version: 2.1
executors:
  my-java:
    docker:
      - image: circleci/openjdk:8-jdk
        user: root
    working_directory: ~/fdsl-test
  my-gcp:
    docker:
      - image: google/cloud-sdk:latest
        user: root
        environment:
          LANG: ja_JP.UTF-8
    working_directory: ~/fdsl-test
commands:
  check_update:
    description: "Check whether there is update under designated directory"
    parameters:
      dir:
        type: string
    steps:
      - checkout
      - run:
          name: Skip job if no update under the directory
          command: |
            if [ $CIRCLE_BRANCH = "master" ]; then
              DIFF_TARGET="HEAD^ HEAD"
            else
              DIFF_TARGET="origin/master"
            fi
            DIFF_EXISTS=false
            for targetDir in << parameters.dir >>; do
              DIFF_FILES=`git diff ${DIFF_TARGET} --name-only --relative=${targetDir} | wc -l`
              if [ $DIFF_FILES -eq 0 ]; then
                echo "There is no update under ${targetDir}"
              else
                echo "There is update under ${targetDir}"
                DIFF_EXISTS=true
                break
              fi
            done
            if ! $DIFF_EXISTS; then
              circleci step halt
            fi
  prepare_gcp_and_locale:
    description: "Prepare GCP and locale settings"
    steps:
      - run:
          name: Prepare GCP and locale settings
          command: |
            # Install
            {
              apt update
              apt install -y locales
              sed -i -e "s/# ja_JP\.UTF-8 UTF-8/ja_JP.UTF-8 UTF-8/" /etc/locale.gen
              locale-gen
              update-locale LANG=ja_JP.UTF-8
            } &
            pidSetLocale=$!
            # Create Google application credentials file and auth SDK
            echo 'export GOOGLE_APPLICATION_CREDENTIALS=~/google_application_credentials.json' >> $BASH_ENV
            source $BASH_ENV
            echo $GCLOUD_SERVICE_KEY > $GOOGLE_APPLICATION_CREDENTIALS
            gcloud auth activate-service-account --key-file $GOOGLE_APPLICATION_CREDENTIALS
            gcloud --quiet config set project $PROJECT
            wait $pidSetLocale
  edit_integration_test_conf_files:
    description: "Replace placeholders in conf and env files of integration test with environment variables"
    steps:
      - run:
          name: Edit conf files
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test/conf

            TEMP_LOCATION=gs://${BUCKET}/temp_${CIRCLE_WORKFLOW_ID}
            sed -i -e "s@TEMP_LOCATION=.*@TEMP_LOCATION=${TEMP_LOCATION}@" dataflow_job_publisher_sample.env

            JOB_STAGING_LOCATION=gs://${BUCKET}/staging_${CIRCLE_WORKFLOW_ID}
            sed -i -e "s@BATCH_JOB_STAGING_LOCATION=.*@BATCH_JOB_STAGING_LOCATION=${JOB_STAGING_LOCATION}@" dataflow_job_publisher_sample.env
            sed -i -e "s@STREAM_JOB_STAGING_LOCATION=.*@STREAM_JOB_STAGING_LOCATION=${JOB_STAGING_LOCATION}@" dataflow_job_publisher_sample.env

            TEMPLATE_LOCATION=gs://${BUCKET}/templates/MyTemplate_${CIRCLE_WORKFLOW_ID}
            sed -i -e "s@TEMPLATE_LOCATION=.*@TEMPLATE_LOCATION=${TEMPLATE_LOCATION}@" dataflow_job_publisher_sample.env

            FROM_SUBSCRIPTION=projects/${PROJECT}/subscriptions/integration-test_${CIRCLE_WORKFLOW_ID}
            sed -i -e "s@FROM_SUBSCRIPTION=.*@FROM_SUBSCRIPTION=${FROM_SUBSCRIPTION}@" dataflow_job_publisher_sample.env

            NAMESPACE=INTEGRATION_TEST_${CIRCLE_WORKFLOW_ID}
            for confFile in dslDataStore effectorDataStore illegalEventDataStore persisterDataStore publisher; do
              sed -i -e "s/\[PROJECT\]/${PROJECT}/g" ${confFile}.properties
              sed -i -e "s/namespace=.*/namespace=${NAMESPACE}/" ${confFile}.properties
            done

            TOTOPIC=projects/${PROJECT}/topics/integration-test_${CIRCLE_WORKFLOW_ID}
            sed -i -e "s@totopic=.*@totopic=${TOTOPIC}@" publisher.properties

            sed -i -e "s/\[CLOUD_SQL_INSTANCE_NAME\]/${CLOUD_SQL_INSTANCE_NAME}/g" cloud-sql.properties
            sed -i -e "s/\[DB_USER\]/${DB_USER}/g" cloud-sql.properties
            sed -i -e "s/\[DB_PASS\]/${DB_PASS}/g" cloud-sql.properties
            popd
  install_maven:
    description: "Install maven"
    steps:
      - run:
          name: Install maven
          command: |
            mkdir ~/maven
            pushd ~/maven
            curl https://www-us.apache.org/dist/maven/maven-3/3.6.1/binaries/apache-maven-3.6.1-bin.tar.gz | tar xzvf -
            echo 'export PATH=$PATH:~/maven/apache-maven-3.6.1/bin' >> $BASH_ENV
            popd
  register_dsl:
    description: "Register FDSL"
    parameters:
      dsldirectory:
        type: string
      dsleffectivedate:
        type: string
        default: "`date +'%Y%m%d'`"
      dslversion:
        type: integer
    steps:
      - check_update:
          dir: "fluxengine-integration-test .circleci"
      - prepare_gcp_and_locale
      - attach_workspace:
          at: ~/state-engine
      - run:
          name: Replace jar
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test/lib
            rm -f fluxengine-*.jar
            for projectDir in local-test-runner remote-test-runner event-publisher
            do
            cp -f ~/state-engine/fluxengine-${projectDir}/target/fluxengine-${projectDir}-*.jar ./
            done
            popd
      - restore_cache:
          keys:
            - v2-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-dsl-cleaner/build.gradle" }}
            - v2-gradle-{{ .Branch }}-
            - v2-gradle-
      - run:
          name: Build integration test
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test
            chmod +x gradlew
            ./gradlew build copyDependencies -x test
            popd
      - save_cache:
          key: v2-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-dsl-cleaner/build.gradle" }}
          paths:
            - ~/.gradle
      - edit_integration_test_conf_files
      - run:
          name: Create license file
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test/conf
            echo $FLUXENGINE_LICENSE_ENCODED | base64 -d > license.lic
            popd
      - run:
          name: Move DSL
          command: |
            mv -f ~/fdsl-test/fluxengine-integration-test/src/main/<< parameters.dsldirectory >> ~/fdsl-test/fluxengine-integration-test/dsl
      - run:
          name: Copy jar
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test/lib
            # Copy integration test jar
            cp -f ../build/libs/fluxengine-integration-test-*.jar ./
            # Copy core jar
            cp -f ~/state-engine/stateengine/target/fluxengine-core-*.jar ./
            rm -f fluxengine-core-*-tests.jar
            # Copy other jars
            for libname in dsl-register parser persist-manager
            do
            cp -f ~/state-engine/fluxengine-${libname}/target/fluxengine-${libname}-*.jar ./
            done
            popd
      - run:
          name: Register DSL
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test
            cp -f ~/state-engine/fluxengine-dsl-register/tools/gcp/regisdsl.sh ./
            chmod +x regisdsl.sh
            mkdir -p out
            mkdir -p log
            EFFECTIVE_DATE=<< parameters.dsleffectivedate >>
            # Run regisdsl with classpath of fluxengine-dsl-register because fluxengine-dsl-register requires GCP related jars but it's not a fat jar
            env CLASSPATH=~/state-engine/fluxengine-dsl-register/target/lib/* ./regisdsl.sh << parameters.dslversion>> ${EFFECTIVE_DATE} 2>&1 | tee temp_dsl_register_output.txt
            ! grep 'Exception:' temp_dsl_register_output.txt > /dev/null
            popd
  deploy_dataflow_jobs:
    description: "Deploy Dataflow jobs with designated persister db"
    parameters:
      persisterdb:
        type: string
      presubmitevent:
        type: boolean
    steps:
      - check_update:
          dir: "fluxengine-integration-test .circleci"
      - prepare_gcp_and_locale
      - attach_workspace:
          at: ~/state-engine
      - when:
          condition: << parameters.presubmitevent >>
          steps:
            - run:
                name: Publish event before deployment
                command: |
                  # Publish event
                  # Temporarily disable pipefail because "cat /dev/urandom" raises it
                  set +o pipefail
                  TEST_PERSIST_STRING=`cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -1 | tr -d '\n'`
                  set -o pipefail
                  echo -n $TEST_PERSIST_STRING > ~/state-engine/test_persist_string.txt
                  PUBSUB_NAME=integration-test_${CIRCLE_WORKFLOW_ID}
                  gcloud pubsub topics publish projects/${PROJECT}/topics/${PUBSUB_NAME} --message="[{\"eventName\":\"Subscriptionイベント\",\"namespace\":\"subscription/イベントの文字列をそのまま永続化\",\"createTime\":null,\"property\":{\"ユーザーID\":\"S01\",\"文字列\":\"${TEST_PERSIST_STRING}\"}}]"
                background: true
      - edit_integration_test_conf_files
      - run:
          name: Edit persister db setting
          command: |
            sed -i -e "s/persister\.db=.*/persister.db=<< parameters.persisterdb >>/" ~/fdsl-test/fluxengine-integration-test/conf/fluxengine.properties
      - run:
          name: Edit Memorystore setting
          command: |
            if [ "<< parameters.persisterdb >>" = "memorystore" ]; then
              # Wait for Memorystore instance to startup
              REDIS_INSTANCE_NAME=i-${CIRCLE_WORKFLOW_ID}
              while ! gcloud redis instances describe ${REDIS_INSTANCE_NAME} --region=asia-northeast1 | grep 'host: '; do
                sleep 10
              done
              pushd ~/fdsl-test/fluxengine-integration-test/conf
              echo -e "\n" >> fluxengine.properties
              gcloud redis instances describe ${REDIS_INSTANCE_NAME} --region=asia-northeast1 | grep 'host: ' | sed -e 's/host: /persister.memorystore.host=/' >> fluxengine.properties
              gcloud redis instances describe ${REDIS_INSTANCE_NAME} --region=asia-northeast1 | grep 'port: ' | sed -e 's/port: /persister.memorystore.port=/' >> fluxengine.properties
              popd
            fi
      - run:
          name: Replace jar
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test/lib
            rm -f fluxengine-*.jar
            for libname in local-test-runner dataflow
            do
            cp -f ~/state-engine/fluxengine-${libname}/target/fluxengine-${libname}-*.jar ./
            done
            popd
      - restore_cache:
          keys:
            - v2-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-dsl-cleaner/build.gradle" }}
            - v2-gradle-{{ .Branch }}-
            - v2-gradle-
      - run:
          name: Build integration test
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test
            chmod +x gradlew
            ./gradlew build copyDependencies -x test
            cp -f build/libs/fluxengine-integration-test-*.jar lib/
            popd
      - save_cache:
          key: v2-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-dsl-cleaner/build.gradle" }}
          paths:
            - ~/.gradle
      - run:
          name: Remove local test runner
          command: |
            # Avoid local test runner to work in dataflow
            rm -f ~/fdsl-test/fluxengine-integration-test/lib/fluxengine-local-test-runner-*.jar
      - run:
          name: Register job
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test
            chmod +x dataflow_job_publisher.sh
            # Run dataflow_job_publisher with classpath of fluxengine-datalow because it requires GCP related jars but it's not a fat jar
            # also deploy batch job
            env CLASSPATH=~/state-engine/fluxengine-dataflow/target/lib/* ./dataflow_job_publisher.sh batch conf/dataflow_job_publisher_sample.env debug &
            pidDeployBatch=$!
            env CLASSPATH=~/state-engine/fluxengine-dataflow/target/lib/* ./dataflow_job_publisher.sh stream conf/dataflow_job_publisher_sample.env debug | tee temp_dataflow_job_register_output.txt
            # Obtain deployed job ID in order to stop it later
            grep 'Submitted job:' temp_dataflow_job_register_output.txt | awk '{print $3}' > ~/state-engine/dataflow_job_id.txt
            wait $pidDeployBatch
            popd
      - persist_to_workspace:
          root: ~/state-engine
          paths:
            - .
  test_dataflow:
    description: "Test Dataflow jobs with designated persister db"
    parameters:
      persisterdb:
        type: string
    steps:
      - check_update:
          dir: "fluxengine-integration-test .circleci"
      - prepare_gcp_and_locale
      - attach_workspace:
          at: ~/state-engine
      - edit_integration_test_conf_files
      - run:
          name: Edit persister db setting
          command: |
            sed -i -e "s/persister\.db=.*/persister.db=<< parameters.persisterdb >>/" ~/fdsl-test/fluxengine-integration-test/conf/fluxengine.properties
      - run:
          name: Replace jar
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test/lib
            rm -f fluxengine-*.jar
            for projectDir in local-test-runner remote-test-runner event-publisher
            do
            cp -f ~/state-engine/fluxengine-${projectDir}/target/fluxengine-${projectDir}-*.jar ./
            done
            popd
      - restore_cache:
          keys:
            - v2-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-dsl-cleaner/build.gradle" }}
            - v2-gradle-{{ .Branch }}-
            - v2-gradle-
      - run:
          name: Wait for SQL instance to startup
          command: |
            {
              mkdir ~/proxy
              cd ~/proxy
              curl -o cloud_sql_proxy https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64
              chmod +x cloud_sql_proxy
              ./cloud_sql_proxy -instances=${CLOUD_SQL_INSTANCE_NAME}=tcp:3306 --refresh_config_throttle=30s
            } &
            pidProxy=$!
            apt install -y mysql-client
            while ! mysqladmin ping --user=${DB_USER} --password=${DB_PASS} --host=127.0.0.1 --port=3306 | grep 'mysqld is alive'; do
              sleep 31
            done
            kill $pidProxy
      - run:
          name: Test Dataflow job
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test
            chmod +x gradlew
            env FLUXENGINE_INTEGRATION_TEST_DATAFLOW_STREAM=true FLUXENGINE_INTEGRATION_TEST_DATAFLOW_BATCH=true TEST_PERSIST_USERID=S01 TEST_PERSIST_STRING=`cat ~/state-engine/test_persist_string.txt` SERVICE_NAME=${CIRCLE_WORKFLOW_ID} ./gradlew test --tests jp.co.fluxengine.example.dataflowtest*
            popd
      - run:
          name: Stop Dataflow job
          command: |
            while read dataflowJobId
            do
            echo "Stopping $dataflowJobId"
            gcloud dataflow jobs cancel $dataflowJobId --region=asia-northeast1
            done < ~/state-engine/dataflow_job_id.txt
            rm -f ~/state-engine/dataflow_job_id.txt
          when: always
          background: true
      - save_cache:
          key: v2-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-dsl-cleaner/build.gradle" }}
          paths:
            - ~/.gradle
      - run:
          name: Copy log file
          command: cp -f ~/fdsl-test/fluxengine-integration-test/debug.log ~/fdsl-test/fluxengine-integration-test/build/reports/tests/test/
          when: always
      - store_artifacts:
          path: ~/fdsl-test/fluxengine-integration-test/build/reports/tests/test
          destination: test
      - store_test_results:
          path: ~/fdsl-test/fluxengine-integration-test/build/test-results
      - run:
          name: Wait for job termination
          command: |
            while [ -f ~/state-engine/dataflow_job_id.txt ]
            do
              sleep 2
            done
          when: always
  test_dsl_replacement:
    description: "Test FDSL replacement"
    parameters:
      variablename:
        type: string
    steps:
      - check_update:
          dir: "fluxengine-integration-test .circleci"
      - prepare_gcp_and_locale
      - attach_workspace:
          at: ~/state-engine
      - edit_integration_test_conf_files
      - run:
          name: Edit persister db setting
          command: |
            sed -i -e "s/persister\.db=.*/persister.db=datastore/" ~/fdsl-test/fluxengine-integration-test/conf/fluxengine.properties
      - run:
          name: Replace jar
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test/lib
            rm -f fluxengine-*.jar
            for projectDir in local-test-runner remote-test-runner event-publisher
            do
            cp -f ~/state-engine/fluxengine-${projectDir}/target/fluxengine-${projectDir}-*.jar ./
            done
            popd
      - restore_cache:
          keys:
            - v2-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-dsl-cleaner/build.gradle" }}
            - v2-gradle-{{ .Branch }}-
            - v2-gradle-
      - run:
          name: Test Dataflow job
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test
            chmod +x gradlew
            env << parameters.variablename >>=true ./gradlew test --tests jp.co.fluxengine.example.dslreplacementtest*
            popd
      - save_cache:
          key: v2-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-dsl-cleaner/build.gradle" }}
          paths:
            - ~/.gradle
      - run:
          name: Copy log file
          command: cp -f ~/fdsl-test/fluxengine-integration-test/debug.log ~/fdsl-test/fluxengine-integration-test/build/reports/tests/test/
          when: always
      - store_artifacts:
          path: ~/fdsl-test/fluxengine-integration-test/build/reports/tests/test
          destination: test
      - store_test_results:
          path: ~/fdsl-test/fluxengine-integration-test/build/test-results
  stop_db_on_fail:
    description: "Stop DB instances when failed"
    steps:
      - run:
          name: Stop DB
          command: |
            {
              PUBSUB_NAME=integration-test_${CIRCLE_WORKFLOW_ID}
              gcloud pubsub subscriptions delete ${PUBSUB_NAME}
              gcloud pubsub topics delete ${PUBSUB_NAME}
            } &
            pidPubsub=$!
            gcloud sql instances patch integration-test --activation-policy=NEVER --async
            REDIS_INSTANCE_NAME=i-${CIRCLE_WORKFLOW_ID}
            gcloud --quiet redis instances delete ${REDIS_INSTANCE_NAME} --region=asia-northeast1 --async
            wait $pidPubsub
          when: on_fail
jobs:
  start_db:
    executor: my-gcp
    steps:
      - check_update:
          dir: "fluxengine-integration-test .circleci"
      - prepare_gcp_and_locale
      - run:
          name: Start DB instances
          command: |
            {
              PUBSUB_NAME=integration-test_${CIRCLE_WORKFLOW_ID}
              gcloud pubsub topics create ${PUBSUB_NAME}
              gcloud pubsub subscriptions create ${PUBSUB_NAME} --topic=${PUBSUB_NAME}
            } &
            pidPubsub=$!
            gcloud sql instances patch integration-test --activation-policy=ALWAYS --async
            REDIS_INSTANCE_NAME=i-${CIRCLE_WORKFLOW_ID}
            gcloud redis instances create ${REDIS_INSTANCE_NAME} --size=1 --region=asia-northeast1 --zone=asia-northeast1-b --redis-version=redis_4_0 --async
            wait $pidPubsub
  build_engine:
    executor: my-java
    steps:
      - check_update:
          dir: "fluxengine-local-test fluxengine-integration-test .circleci"
      - run:
          name: Checkout state-engine
          command: |
            mkdir -p ~/.ssh
            echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
            pushd ~/
            git clone git@github.com:Fluxengin/state-engine.git
            popd
      - restore_cache:
          keys:
            - v2-m2-{{ .Branch }}-{{ checksum "~/state-engine/stateengine/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dsl-register/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-event-publisher/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-parser/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-local-test-runner/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dsl-loader/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-persist-manager/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-remote-test-runner/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-cloud-sql/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-housekeep/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-housekeep-servlet/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-batch-servlet/pom.xml" }}
            - v2-m2-{{ .Branch }}-
            - v2-m2-
      - run:
          name: Build state-engine
          command: |
            mkdir ~/logs
            function buildEngine() {
              pushd ~/state-engine/$1
              mvn clean install -U > ~/logs/$1.log
              popd
            }
            buildEngine fluxengine-dataflow-housekeep-servlet &
            pidDataflowHousekeepServlet=$!

            buildEngine stateengine

            buildEngine fluxengine-dsl-register &
            pidDslRegister=$!
            buildEngine fluxengine-event-publisher &
            pidEventPublisher=$!
            buildEngine fluxengine-dataflow-batch-servlet &
            pidDataflowBatchServlet=$!
            {
              buildEngine fluxengine-parser
              buildEngine fluxengine-local-test-runner
            } &
            pidLocalTestRunner=$!
            buildEngine fluxengine-cloud-sql &
            pidCloudSql=$!
            buildEngine fluxengine-dsl-loader &
            pidDslLoader=$!
            buildEngine fluxengine-persist-manager
            wait $pidDslLoader
            buildEngine fluxengine-remote-test-runner &
            pidRemoteTestRunner=$!
            buildEngine fluxengine-dataflow-housekeep &
            pidDataflowHousekeep=$!
            wait $pidCloudSql
            buildEngine fluxengine-dataflow
            wait $pidDataflowHousekeepServlet $pidDslRegister $pidEventPublisher $pidDataflowBatchServlet $pidLocalTestRunner $pidRemoteTestRunner $pidDataflowHousekeep
      - save_cache:
          key: v2-m2-{{ .Branch }}-{{ checksum "~/state-engine/stateengine/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dsl-register/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-event-publisher/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-parser/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-local-test-runner/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dsl-loader/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-persist-manager/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-remote-test-runner/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-cloud-sql/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-housekeep/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-housekeep-servlet/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-batch-servlet/pom.xml" }}
          paths:
            - ~/.m2
      - store_artifacts:
          path: ~/logs
          destination: logs
      - persist_to_workspace:
          root: ~/state-engine
          paths:
            - .
  test_fdsl:
    executor: my-java
    steps:
      - check_update:
          dir: "fluxengine-local-test .circleci"
      - attach_workspace:
          at: ~/state-engine
      - run:
          name: Replace test runner
          command: |
            rm -f ~/fdsl-test/fluxengine-local-test/lib/fluxengine-local-test-runner-*.jar
            cp -f ~/state-engine/fluxengine-local-test-runner/target/fluxengine-local-test-runner-*.jar ~/fdsl-test/fluxengine-local-test/lib/
      - restore_cache:
          keys:
            - v2-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-dsl-cleaner/build.gradle" }}
            - v2-gradle-{{ .Branch }}-
            - v2-gradle-
      - run:
          name: Run test
          command: |
            pushd ~/fdsl-test/fluxengine-local-test
            chmod +x gradlew
            export CONF=`pwd`/conf/
            ./gradlew test
            popd
      - run:
          name: Copy log file
          command: cp -f ~/fdsl-test/fluxengine-local-test/debug.log ~/fdsl-test/fluxengine-local-test/build/reports/tests/test/
          when: always
      - save_cache:
          key: v2-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-dsl-cleaner/build.gradle" }}
          paths:
            - ~/.gradle
      - store_artifacts:
          path: ~/fdsl-test/fluxengine-local-test/build/reports/tests/test
          destination: test
      - store_test_results:
          path: ~/fdsl-test/fluxengine-local-test/build/test-results
  deploy_batch_servlet:
    executor: my-gcp
    steps:
      - check_update:
          dir: "fluxengine-integration-test .circleci"
      - prepare_gcp_and_locale
      - install_maven
      - attach_workspace:
          at: ~/state-engine
      - run:
          name: Edit conf file
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test-batch-servlet/src/main/webapp/WEB-INF
            sed -i -e "s/\[PROJECT\]/${PROJECT}/g" job.properties
            TEMPLATE_LOCATION=gs://${BUCKET}/templates/MyTemplate_${CIRCLE_WORKFLOW_ID}
            sed -i -e "s@templateLocation=.*@templateLocation=${TEMPLATE_LOCATION}@" job.properties
            SERVICE_NAME=${CIRCLE_WORKFLOW_ID}
            sed -i -e "s@<service>.*\?</service>@<service>${SERVICE_NAME}</service>@" appengine-web.xml
            popd
      - run:
          name: Replace jar
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test-batch-servlet/src/main/webapp/WEB-INF/lib
            rm -f fluxengine-*.jar
            cp -f ~/state-engine/fluxengine-dataflow-batch-servlet/target/fluxengine-dataflow-batch-servlet-*.jar ./fluxengine-dataflow-batch-servlet.jar
            popd
      - restore_cache:
          keys:
            - v2-m2-{{ .Branch }}-{{ checksum "~/state-engine/stateengine/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dsl-register/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-event-publisher/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-parser/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-local-test-runner/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dsl-loader/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-persist-manager/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-remote-test-runner/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-cloud-sql/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-housekeep/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-housekeep-servlet/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-batch-servlet/pom.xml" }}
            - v2-m2-{{ .Branch }}-
            - v2-m2-
      - run:
          name: Deploy batch servlet
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test-batch-servlet
            mvn package appengine:deploy
            popd
      - save_cache:
          key: v2-m2-{{ .Branch }}-{{ checksum "~/state-engine/stateengine/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dsl-register/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-event-publisher/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-parser/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-local-test-runner/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dsl-loader/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-persist-manager/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-remote-test-runner/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-cloud-sql/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-housekeep/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-housekeep-servlet/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-batch-servlet/pom.xml" }}
          paths:
            - ~/.m2
  register_main_dsl:
    executor: my-gcp
    steps:
      - register_dsl:
          dsldirectory: "dsl"
          dslversion: 1
  deploy_dataflow_jobs_datastore:
    executor: my-gcp
    steps:
      - deploy_dataflow_jobs:
          persisterdb: datastore
          presubmitevent: true
  test_dataflow_datastore:
    executor: my-gcp
    steps:
      - test_dataflow:
          persisterdb: datastore
      - stop_db_on_fail
  post_housekeep_test_data:
    executor: my-gcp
    steps:
      - check_update:
          dir: "fluxengine-integration-test .circleci"
      - run:
          name: Set locale
          command: |
            apt update
            apt install -y locales
            sed -i -e "s/# ja_JP\.UTF-8 UTF-8/ja_JP.UTF-8 UTF-8/" /etc/locale.gen
            locale-gen
            update-locale LANG=ja_JP.UTF-8
      - run:
          name: Post housekeep test data through batch servlet
          command: |
            mkdir ~/curl
            TODAY_STRING=`date "+%Y-%m-%d"`
            TOMORROW_STRING=`date "+%Y-%m-%d" -d '1 days'`
            APP_SERVER=${CIRCLE_WORKFLOW_ID}-dot-${PROJECT}.appspot.com
            curl -H 'Content-Type:application/json' -d "[{\"eventName\":\"Housekeepパケット使用A\",\"namespace\":\"housekeep/様々なlifetimeで永続化\",\"createTime\":null,\"property\":{\"ユーザーID\":\"user1\",\"使用量\":500}},{\"eventName\":\"Housekeepパケット使用B\",\"namespace\":\"housekeep/様々なlifetimeで永続化\",\"createTime\":null,\"property\":{\"ユーザーID\":\"user2\",\"使用量\":500,\"期限1\":\"${TODAY_STRING}\"}},{\"eventName\":\"Housekeepパケット使用C\",\"namespace\":\"housekeep/様々なlifetimeで永続化\",\"createTime\":null,\"property\":{\"ユーザーID\":\"user3\",\"使用量\":500,\"期限2\":\"${TODAY_STRING}\"}},{\"eventName\":\"Housekeepパケット使用D\",\"namespace\":\"housekeep/様々なlifetimeで永続化\",\"createTime\":null,\"property\":{\"ユーザーID\":\"user5\",\"使用量\":500,\"期限1\":\"${TODAY_STRING}\",\"期限2\":\"${TOMORROW_STRING}\"}}]" https://${APP_SERVER}/fluxengine-integration-test-event &
            pidPostHousekeepEvent=$!
            curl -H 'Content-Type:application/json' -d "[{\"eventName\":\"Housekeepパケット使用D\",\"namespace\":\"housekeep/様々なlifetimeで永続化\",\"createTime\":null,\"property\":{\"ユーザーID\":\"user4\",\"使用量\":500,\"期限1\":\"${TODAY_STRING}\",\"期限2\":\"${TODAY_STRING}\"}}]" https://${APP_SERVER}/fluxengine-integration-test-event
            wait $pidPostHousekeepEvent
  deploy_dataflow_jobs_memorystore:
    executor: my-gcp
    steps:
      - deploy_dataflow_jobs:
          persisterdb: memorystore
          presubmitevent: true
      - stop_db_on_fail
  test_dataflow_memorystore:
    executor: my-gcp
    steps:
      - test_dataflow:
          persisterdb: memorystore
      - stop_db_on_fail
  test_housekeep:
    executor: my-gcp
    steps:
      - check_update:
          dir: "fluxengine-integration-test .circleci"
      - prepare_gcp_and_locale
      - attach_workspace:
          at: ~/state-engine
      - install_maven
      - run:
          name: Edit Housekeep conf files
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test-housekeep
            HOUSEKEEP_JOB_STAGING_LOCATION=gs://${BUCKET}/staging_${CIRCLE_WORKFLOW_ID}
            TEMPLATE_LOCATION=gs://${BUCKET}/templates/housekeepJob_${CIRCLE_WORKFLOW_ID}
            sed -i -e "s@HOUSEKEEP_JOB_STAGING_LOCATION=.*@HOUSEKEEP_JOB_STAGING_LOCATION=${HOUSEKEEP_JOB_STAGING_LOCATION}@" fluxengine_housekeep.env
            sed -i -e "s@TEMPLATE_LOCATION=.*@TEMPLATE_LOCATION=${TEMPLATE_LOCATION}@" fluxengine_housekeep.env

            NAMESPACE=INTEGRATION_TEST_${CIRCLE_WORKFLOW_ID}
            sed -i -e "s/namespace=.*/namespace=${NAMESPACE}/" src/main/resources/persisterDataStore.properties
            sed -i -e "s/\[PROJECT\]/${PROJECT}/g" src/main/resources/persisterDataStore.properties

            sed -i -e "s/\[PROJECT\]/${PROJECT}/g" src/main/webapp/WEB-INF/housekeepJob.properties
            sed -i -e "s@templateLocation=.*@templateLocation=${TEMPLATE_LOCATION}@" src/main/webapp/WEB-INF/housekeepJob.properties

            HOUSEKEEP_SERVICE_NAME=h-${CIRCLE_WORKFLOW_ID}
            sed -i -e "s@<service>.*\?</service>@<service>${HOUSEKEEP_SERVICE_NAME}</service>@" src/main/webapp/WEB-INF/appengine-web.xml
            popd
      - run:
          name: Copy Housekeep conf files
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test-housekeep
            cp -rf src/main/resources conf
            popd
      - run:
          name: Replace jar
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test-housekeep
            rm -f lib/fluxengine-*.jar
            cp -f ~/state-engine/fluxengine-dataflow-housekeep/target/fluxengine-dataflow-housekeep-*.jar lib/fluxengine-dataflow-housekeep.jar
            rm -f src/main/webapp/WEB-INF/lib/fluxengine-*.jar
            cp -f ~/state-engine/fluxengine-dataflow-housekeep-servlet/target/fluxengine-dataflow-housekeep-servlet-*.jar src/main/webapp/WEB-INF/lib/
            popd
      - run:
          name: Deploy Housekeep batch job
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test-housekeep
            chmod +x fluxengine_housekeep.sh
            ./fluxengine_housekeep.sh $(pwd)/fluxengine_housekeep.env
            popd
          background: true
      - restore_cache:
          keys:
            - v2-m2-{{ .Branch }}-{{ checksum "~/state-engine/stateengine/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dsl-register/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-event-publisher/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-parser/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-local-test-runner/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dsl-loader/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-persist-manager/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-remote-test-runner/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-cloud-sql/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-housekeep/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-housekeep-servlet/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-batch-servlet/pom.xml" }}
            - v2-m2-{{ .Branch }}-
            - v2-m2-
      - run:
          name: Deploy Housekeep servlet
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test-housekeep
            mvn clean package appengine:deploy
            popd
      - save_cache:
          key: v2-m2-{{ .Branch }}-{{ checksum "~/state-engine/stateengine/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dsl-register/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-event-publisher/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-parser/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-local-test-runner/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dsl-loader/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-persist-manager/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-remote-test-runner/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-cloud-sql/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-housekeep/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-housekeep-servlet/pom.xml" }}-{{ checksum "~/state-engine/fluxengine-dataflow-batch-servlet/pom.xml" }}
          paths:
            - ~/.m2
      - edit_integration_test_conf_files
      - run:
          name: Replace jar
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test/lib
            rm -f fluxengine-*.jar
            for projectDir in local-test-runner remote-test-runner event-publisher
            do
            cp -f ~/state-engine/fluxengine-${projectDir}/target/fluxengine-${projectDir}-*.jar ./
            done
            popd
      - restore_cache:
          keys:
            - v2-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-dsl-cleaner/build.gradle" }}
            - v2-gradle-{{ .Branch }}-
            - v2-gradle-
      - run:
          name: Test Housekeep
          command: |
            pushd ~/fdsl-test/fluxengine-integration-test
            chmod +x gradlew
            env FLUXENGINE_INTEGRATION_TEST_HOUSEKEEP=true HOUSEKEEP_SERVICE_NAME=h-${CIRCLE_WORKFLOW_ID} ./gradlew test --tests jp.co.fluxengine.example.housekeeptest.HousekeepTest
            popd
      - save_cache:
          key: v2-gradle-{{ .Branch }}-{{ checksum "~/fdsl-test/fluxengine-local-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-integration-test/build.gradle" }}-{{ checksum "~/fdsl-test/fluxengine-dsl-cleaner/build.gradle" }}
          paths:
            - ~/.gradle
      - run:
          name: Copy log file
          command: |
            cp -f ~/fdsl-test/fluxengine-integration-test/debug.log ~/fdsl-test/fluxengine-integration-test/build/reports/tests/test/
          when: always
      - store_artifacts:
          path: ~/fdsl-test/fluxengine-integration-test/build/reports/tests/test
          destination: test
      - store_test_results:
          path: ~/fdsl-test/fluxengine-integration-test/build/test-results
      - run:
          name: Delete App Engine service
          command: |
            HOUSEKEEP_SERVICE_NAME=h-${CIRCLE_WORKFLOW_ID}
            gcloud --quiet app services delete ${HOUSEKEEP_SERVICE_NAME}
          when: always
      - stop_db_on_fail
  deploy_dataflow_jobs_dsl_replacement:
    executor: my-gcp
    steps:
      - deploy_dataflow_jobs:
          persisterdb: datastore
          presubmitevent: false
      - stop_db_on_fail
  register_dsl_before:
    executor: my-gcp
    steps:
      - register_dsl:
          dsldirectory: "dsl_before"
          dslversion: 2
      - stop_db_on_fail
  test_dsl_before:
    executor: my-gcp
    steps:
      - test_dsl_replacement:
          variablename: "FLUXENGINE_INTEGRATION_TEST_DSL_REPLACEMENT_BEFORE"
      - run:
          name: Stop Dataflow job
          command: |
            while read dataflowJobId; do
              echo "Stopping $dataflowJobId"
              gcloud dataflow jobs cancel $dataflowJobId --region=asia-northeast1
            done < ~/state-engine/dataflow_job_id.txt
            rm -f ~/state-engine/dataflow_job_id.txt
          when: on_fail
      - stop_db_on_fail
  register_dsl_after:
    executor: my-gcp
    steps:
      - register_dsl:
          dsldirectory: "dsl_after"
          dslversion: 3
      - run:
          name: Wait for job to read new FDSL
          command: |
            echo "dsl_after registered at $(date +'%Y/%m/%d %H:%M:%S')"
            sleep 60
          when: on_success
      - stop_db_on_fail
  register_dsl_dummy:
    executor: my-gcp
    steps:
      # register dsl_dummy with its effective start date set tomorrow to make sure it's not executed
      - register_dsl:
          dsldirectory: "dsl_dummy"
          dsleffectivedate: "`date +'%Y%m%d' -d '1 days'`"
          dslversion: 4
      - run:
          name: Wait for job to read new FDSL
          command: |
            echo "dsl_dummy registered at $(date +'%Y/%m/%d %H:%M:%S')"
            sleep 60
          when: on_success
      - stop_db_on_fail
  test_dsl_after:
    executor: my-gcp
    steps:
      - test_dsl_replacement:
          variablename: "FLUXENGINE_INTEGRATION_TEST_DSL_REPLACEMENT_AFTER"
      - run:
          name: Stop Dataflow job
          command: |
            while read dataflowJobId; do
              echo "Stopping $dataflowJobId"
              gcloud dataflow jobs cancel $dataflowJobId --region=asia-northeast1
            done < ~/state-engine/dataflow_job_id.txt
            rm -f ~/state-engine/dataflow_job_id.txt
          when: always
      - run:
          name: Stop DB
          command: |
            {
              PUBSUB_NAME=integration-test_${CIRCLE_WORKFLOW_ID}
              gcloud pubsub subscriptions delete ${PUBSUB_NAME}
              gcloud pubsub topics delete ${PUBSUB_NAME}
            } &
            pidPubsub=$!

            gcloud sql instances patch integration-test --activation-policy=NEVER --async
            REDIS_INSTANCE_NAME=i-${CIRCLE_WORKFLOW_ID}
            gcloud --quiet redis instances delete ${REDIS_INSTANCE_NAME} --region=asia-northeast1 --async

            SERVICE_NAME=${CIRCLE_WORKFLOW_ID}
            gcloud --quiet app services delete ${SERVICE_NAME}

            wait $pidPubsub
          when: always
workflows:
  version: 2
  deploy_dsl_test:
    jobs:
      - build_engine:
          filters:
            branches:
              only:
                - master
                - /.*circleci.*/
            tags:
              only:
                - /^ci.*/
      - test_fdsl:
          requires:
            - build_engine
          filters:
            branches:
              only:
                - master
                - /.*circleci.*/
            tags:
              only:
                - /^ci.*/
      - start_db:
          filters:
            branches:
              only:
                - master
                - /.*circleci.*/
            tags:
              only:
                - /^ci.*/
      - deploy_batch_servlet:
          requires:
            - build_engine
          filters:
            branches:
              only:
                - master
                - /.*circleci.*/
            tags:
              only:
                - /^ci.*/
      - register_main_dsl:
          requires:
            - build_engine
          filters:
            branches:
              only:
                - master
                - /.*circleci.*/
            tags:
              only:
                - /^ci.*/
      - deploy_dataflow_jobs_datastore:
          requires:
            - build_engine
          filters:
            branches:
              only:
                - master
                - /.*circleci.*/
            tags:
              only:
                - /^ci.*/
      - test_dataflow_datastore:
          requires:
            - deploy_batch_servlet
            - register_main_dsl
            - deploy_dataflow_jobs_datastore
            - start_db
          filters:
            branches:
              only:
                - master
                - /.*circleci.*/
            tags:
              only:
                - /^ci.*/
      - post_housekeep_test_data:
          requires:
            - deploy_batch_servlet
            - register_main_dsl
            - deploy_dataflow_jobs_datastore
          filters:
            branches:
              only:
                - master
                - /.*circleci.*/
            tags:
              only:
                - /^ci.*/
      - test_housekeep:
          requires:
            - test_dataflow_datastore
            - post_housekeep_test_data
          filters:
            branches:
              only:
                - master
                - /.*circleci.*/
            tags:
              only:
                - /^ci.*/
      - deploy_dataflow_jobs_memorystore:
          requires:
            - test_dataflow_datastore
            - post_housekeep_test_data
          filters:
            branches:
              only:
                - master
                - /.*circleci.*/
            tags:
              only:
                - /^ci.*/
      - test_dataflow_memorystore:
          requires:
            - deploy_dataflow_jobs_memorystore
          filters:
            branches:
              only:
                - master
                - /.*circleci.*/
            tags:
              only:
                - /^ci.*/
      - deploy_dataflow_jobs_dsl_replacement:
          requires:
            - test_dataflow_memorystore
            - test_housekeep
          filters:
            branches:
              only:
                - master
                - /.*circleci.*/
            tags:
              only:
                - /^ci.*/
      - register_dsl_before:
          requires:
            - test_dataflow_memorystore
            - test_housekeep
          filters:
            branches:
              only:
                - master
                - /.*circleci.*/
            tags:
              only:
                - /^ci.*/
      - test_dsl_before:
          requires:
            - deploy_dataflow_jobs_dsl_replacement
            - register_dsl_before
          filters:
            branches:
              only:
                - master
                - /.*circleci.*/
            tags:
              only:
                - /^ci.*/
      - register_dsl_after:
          requires:
            - test_dsl_before
          filters:
            branches:
              only:
                - master
                - /.*circleci.*/
            tags:
              only:
                - /^ci.*/
      - register_dsl_dummy:
          requires:
            - test_dsl_before
          filters:
            branches:
              only:
                - master
                - /.*circleci.*/
            tags:
              only:
                - /^ci.*/
      - test_dsl_after:
          requires:
            - register_dsl_after
            - register_dsl_dummy
          filters:
            branches:
              only:
                - master
                - /.*circleci.*/
            tags:
              only:
                - /^ci.*/
